{"version":3,"sources":["firebaseInit.js","Messaging.js","App.js","index.js","serviceWorker.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","Messaging","token","React","useState","messages","setMessages","requesting","setRequesting","useEffect","axios","get","then","resp","data","Promise","resolve","onMessage","payload","title","body","toast","info","catch","err","error","JSON","stringify","Container","initialValues","name","message","onSubmit","values","actions","post","concat","setSubmitting","success","console","log","prop","handleSubmit","handleChange","isSubmitting","InputGroup","className","Prepend","Text","id","FormControl","placeholder","onChange","Button","variant","disabled","Spinner","as","size","role","animation","aria-hidden","onClick","map","m","index","key","defaults","baseURL","App","setToken","reject","requestPermission","getToken","firebaseToken","autoClose","position","Navbar","bg","Brand","href","Row","Col","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","register","registration","scope"],"mappings":"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","file":"static/js/main.7090f086.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\n\nconst config = {\n  apiKey: \"AIzaSyAElLIaEfWyeAEXGg0cfn9cVJ1unQsAi0I\",\n  authDomain: \"web-chat-72b52.firebaseapp.com\",\n  databaseURL: \"https://web-chat-72b52.firebaseio.com\",\n  projectId: \"web-chat-72b52\",\n  storageBucket: \"web-chat-72b52.appspot.com\",\n  messagingSenderId: \"442573275776\",\n  appId: \"1:442573275776:web:9f6cefe95e1e61b96fdc65\",\n  measurementId: \"G-3FDDZHC2DS\",\n};\n\nfirebase.initializeApp(config);\nconst messaging = firebase.messaging();\n\n// next block of code goes here\n\nexport const requestFirebaseNotificationPermission = () =>\n  new Promise((resolve, reject) => {\n    messaging\n      .requestPermission()\n      .then(() => messaging.getToken())\n      .then((firebaseToken) => {\n        resolve(firebaseToken);\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    messaging.onMessage((payload) => {\n      resolve(payload);\n    });\n  });","import React from \"react\";\nimport axios from \"axios\";\nimport { Formik } from \"formik\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Container from \"react-bootstrap/Container\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { onMessageListener } from \"./firebaseInit\";\n\nimport { toast } from \"react-toastify\";\n\nexport const Messaging = ({ token }) => {\n  const [messages, setMessages] = React.useState([]);\n  const [requesting, setRequesting] = React.useState(false);\n\n  React.useEffect(() => {\n    setRequesting(true);\n    axios.get(\"/messages\").then((resp) => {\n      setMessages(resp.data.messages);\n      setRequesting(false);\n    });\n  }, []);\n\n  onMessageListener()\n    .then((payload) => {\n      const { title, body } = payload.data;\n      toast.info(`${title}; ${body}`);\n    })\n    .catch((err) => {\n      toast.error(JSON.stringify(err));\n    });\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{\n          name: \"\",\n          message: \"\",\n        }}\n        onSubmit={(values, actions) => {\n          axios\n            .post(\"/messages\", { ...values, token })\n            .then((resp) => {\n              setMessages(resp.data.messages.concat(messages));\n              actions.setSubmitting(false);\n              toast.success(\"Submitted succesfully\");\n            })\n            .catch((err) => {\n              console.log(err);\n              toast.error(\"There was an error saving the message\");\n            });\n        }}\n      >\n        {(prop) => {\n          const { handleSubmit, handleChange, isSubmitting } = prop;\n          return (\n            <>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Name</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  placeholder=\"Enter your name\"\n                  onChange={handleChange(\"name\")}\n                />\n              </InputGroup>\n\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Message</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  onChange={handleChange(\"message\")}\n                  placeholder=\"Enter a message\"\n                />\n              </InputGroup>\n\n              {isSubmitting ? (\n                <Button variant=\"primary\" disabled>\n                  <Spinner\n                    as=\"span\"\n                    size=\"sm\"\n                    role=\"status\"\n                    animation=\"grow\"\n                    aria-hidden=\"true\"\n                  />\n                  Loading...\n                </Button>\n              ) : (\n                <Button variant=\"primary\" onClick={() => handleSubmit()}>\n                  Submit\n                </Button>\n              )}\n            </>\n          );\n        }}\n      </Formik>\n\n      <div className=\"message-list\">\n        <h3>Messages</h3>\n\n        {requesting ? (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        ) : (\n          <>\n            {messages.map((m, index) => {\n              const { name, message } = m;\n              return (\n                <div key={index}>\n                  {name}: {message}\n                </div>\n              );\n            })}\n          </>\n        )}\n      </div>\n    </Container>\n  );\n};\n","import axios from \"axios\";\nimport React, { Fragment } from \"react\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\n\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport \"./App.scss\";\nimport { Messaging } from \"./Messaging\";\nimport { requestFirebaseNotificationPermission } from \"./firebaseInit\";\n\naxios.defaults.baseURL = \"http://localhost:5000/v1\";\n\nconst App = () => {\n  const [token, setToken] = React.useState(\"\");\n  requestFirebaseNotificationPermission()\n    .then((firebaseToken) => {\n      // eslint-disable-next-line no-console\n      console.log(firebaseToken);\n      setToken(firebaseToken);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n\n  return (\n    <Fragment>\n      <ToastContainer autoClose={2000} position=\"top-center\" />\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          Firebase notifictations with React and Express\n        </Navbar.Brand>\n      </Navbar>\n\n      <Container className=\"center-column\">\n        <Row>\n          <Col>\n            <Messaging token={token} />\n          </Col>\n        </Row>\n      </Container>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { registerServiceWorker } from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n","export const registerServiceWorker = () => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker\n      .register(\"firebase-messaging-sw.js\")\n      .then(function (registration) {\n        // eslint-disable-next-line no-console\n        console.log(\"[SW]: SCOPE: \", registration.scope);\n        return registration.scope;\n      })\n      .catch(function (err) {\n        return err;\n      });\n  }\n};\n"],"sourceRoot":""}